<?php

namespace Grt\ResBundle\Entity\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    private $fieldSorting = array('firstname','lastname','middlename');
    /**
     * Return users from array $users that not exist in DB
     * @param ArrayCollection $users
     * @return array
     */
    public function getNewUsers(ArrayCollection $users)
    {
        $usersInns = $this->getInn($users);

        $db = $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.inn IN (:inns)')
            ->setParameter('inns', $usersInns);

        $existingUsers = $db->getQuery()->getResult();

        return $this->getArrayDiffUsers($users, $existingUsers);
    }


    public function getAllUsers($field = 'firstname',$order = 'ASC',$currentPage = 1, $limit = 5)
    {
        // Create our query
        if (in_array($field, $this->fieldSorting)) {
            $field = 'u.' . $field;

            $query = $this->createQueryBuilder('u')
                ->orderBy($field, $order)
                ->getQuery();

            // No need to manually get get the result ($query->getResult())

            $paginator = new Paginator($query);

            $paginator->getQuery()
                ->setFirstResult($limit * ($currentPage - 1))// Offset
                ->setMaxResults($limit); // Limit

            return $paginator;
        }
        return null;
    }

    /**
     * Return users from array $users which do not exist in array $existingUsers
     * @param ArrayCollection $users
     * @param ArrayCollection $existingUsers
     * @return array
     */
    protected function getArrayDiffUsers(ArrayCollection $users, $existingUsers)
    {
        $usersInns = $this->getInn($users);
        $existingInns = $this->getInn($existingUsers);

        $newInns = array_diff($usersInns, $existingInns);

        $newUsers = array();

        if ($newInns) {
            foreach ($users as $human) {
                if (in_array($human->getInn(), $newInns)){
                    $newUsers[] = $human;
                }
            }
        }

        return $newUsers;
    }

    /**
     * Return INN(Insurance Number of Individual Ledger Account user's) users from array $users
     * @param ArrayCollection $users
     * @return array
     */
    protected function getInn($users)
    {
        $usersInns = array();

        foreach ($users as $human){
            $usersInns[] = $human->getInn();
        }

        return $usersInns;
    }


}
